---
description: 描述Task Master CLI应用程序的高层架构。
globs: scripts/modules/*.js
alwaysApply: false
---
# 应用程序架构概述

- **模块化结构**: Task Master CLI采用模块化架构构建,不同模块负责应用程序的不同方面。这促进了关注点分离、可维护性和可测试性。

- **主要模块及职责**:

  - **[`commands.js`](mdc:scripts/modules/commands.js): 命令处理**
    - **目的**: 使用Commander.js定义和注册所有CLI命令。
    - **职责** (参见: [`commands.mdc`](mdc:.cursor/rules/commands.mdc)):
      - 解析命令行参数和选项。
      - 调用`scripts/modules/`中的相应核心逻辑函数。
      - 处理CLI的用户输入/输出。
      - 实现CLI特定的验证。

  - **[`task-manager.js`](mdc:scripts/modules/task-manager.js) & `task-manager/`目录: 任务数据 & 核心逻辑**
    - **目的**: 包含任务数据操作(CRUD)、AI交互和相关逻辑的核心函数。
    - **职责**:
      - 读写`tasks.json`。
      - 实现任务CRUD、解析PRD、扩展任务、更新状态等功能。
      - **委托AI交互**给`ai-services-unified.js`层。
      - 通过`config-manager.js` getters访问非AI配置。
    - **关键文件**: `scripts/modules/task-manager/`中的单独文件处理特定操作(如`add-task.js`、`expand-task.js`)。

  - **[`dependency-manager.js`](mdc:scripts/modules/dependency-manager.js): 依赖管理**
    - **目的**: 管理任务依赖。
    - **职责**: 添加/删除/验证/修复依赖。

  - **[`ui.js`](mdc:scripts/modules/ui.js): 用户界面组件**
    - **目的**: 处理CLI输出格式化(表格、颜色、框、加载动画)。
    - **职责**: 显示任务、报告、进度、建议。

  - **[`ai-services-unified.js`](mdc:scripts/modules/ai-services-unified.js): 统一AI服务层**
    - **目的**: 使用Vercel AI SDK的所有LLM交互的集中接口。
    - **职责** (参见: [`ai_services.mdc`](mdc:.cursor/rules/ai_services.mdc)):
      - 导出`generateTextService`、`generateObjectService`。
      - 基于`role`和`.taskmasterconfig`处理提供商/模型选择。
      - 解析API密钥(来自`.env`或`session.env`)。
      - 实现回退和重试逻辑。
      - 编排对提供商特定实现的调用(`src/ai-providers/`)。

  - **[`src/ai-providers/*.js`](mdc:src/ai-providers/): 提供商特定实现**
    - **目的**: Vercel AI SDK函数的提供商特定包装器。
    - **职责**: 直接与Vercel AI SDK适配器交互。

  - **[`config-manager.js`](mdc:scripts/modules/config-manager.js): 配置管理**
    - **目的**: 加载、验证和提供配置访问。
    - **职责** (参见: [`utilities.mdc`](mdc:.cursor/rules/utilities.mdc)):
      - 读取并合并`.taskmasterconfig`与默认值。
      - 提供getters(如`getMainProvider`、`getLogLevel`、`getDefaultSubtasks`)用于访问设置。
      - **注意**: 不存储或直接处理API密钥(密钥在`.env`或MCP `session.env`中)。

  - **[`utils.js`](mdc:scripts/modules/utils.js): 核心工具函数**
    - **目的**: 低级、可重用的CLI工具。
    - **职责** (参见: [`utilities.mdc`](mdc:.cursor/rules/utilities.mdc)):
      - 日志记录(`log`函数)、文件I/O(`readJSON`、`writeJSON`)、字符串工具(`truncate`)。
      - 任务工具(`findTaskById`)、依赖工具(`findCycles`)。
      - API密钥解析(`resolveEnvVariable`)。
      - 静默模式控制(`enableSilentMode`、`disableSilentMode`)。

  - **[`mcp-server/`](mdc:mcp-server/): MCP服务器集成**
    - **目的**: 使用FastMCP提供MCP接口。
    - **职责** (参见: [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc)):
      - 注册工具(`mcp-server/src/tools/*.js`)。工具`execute`方法**应该用**`withNormalizedProjectRoot` HOF(来自`tools/utils.js`)包装以确保一致的路径处理。
      - HOF为`execute`方法提供规范化的`args.projectRoot`。
      - 工具`execute`方法调用**直接函数包装器**(`mcp-server/src/core/direct-functions/*.js`)，传递规范化的`projectRoot`和其他参数。
      - 直接函数使用路径工具(`mcp-server/src/core/utils/`)基于会话中的`projectRoot`解析路径。
      - 直接函数实现静默模式、日志记录包装器，并调用`scripts/modules/`中的核心逻辑函数。
      - 管理MCP缓存和响应格式化。

  - **[`init.js`](mdc:scripts/init.js): 项目初始化逻辑**
    - **目的**: 设置新的Task Master项目结构。
    - **职责**: 创建目录、复制模板、管理`package.json`、设置`.cursor/mcp.json`。

- **数据流和模块依赖(更新)**:

  - **CLI**: `bin/task-master.js` -> `scripts/dev.js` (加载`.env`) -> `scripts/modules/commands.js` -> 核心逻辑(`scripts/modules/*`) -> 统一AI服务(`ai-services-unified.js`) -> 提供商适配器 -> LLM API。
  - **MCP**: 外部工具 -> `mcp-server/server.js` -> 工具(`mcp-server/src/tools/*`) -> 直接函数(`mcp-server/src/core/direct-functions/*`) -> 核心逻辑(`scripts/modules/*`) -> 统一AI服务(`ai-services-unified.js`) -> 提供商适配器 -> LLM API。
  - **配置**: 需要非AI设置的核心逻辑调用`config-manager.js` getters(如果来自MCP则通过`explicitRoot`传递`session.env`)。统一AI服务内部调用`config-manager.js` getters(使用`role`)获取AI参数，并调用`utils.js`(`resolveEnvVariable`与`session.env`)获取API密钥。

## MCP直接函数中的静默模式实现模式

直接函数(在`mcp-server/src/core/direct-functions/`中的`*Direct`函数)需要谨慎实现静默模式，以防止控制台日志干扰MCP所需的结构化JSON响应。这涉及在核心函数调用周围使用`enableSilentMode`/`disableSilentMode`，并通过标准包装器模式传递MCP日志记录器(参见mcp.mdc)。以下是正确实现的标准模式:

1. **导入静默模式工具**:
