---
description: Guidelines for implementing utility functions
globs: scripts/modules/utils.js, mcp-server/src/**/*
alwaysApply: false
---
以下是翻译后的 Markdown 格式文档内容：

# 实用函数指南

## 基本原则

- **函数范围**：
  - ✅ **应该**：创建服务于多个模块的实用函数。
  - ✅ **应该**：保持函数单一用途且专注。
  - ❌ **不应该**：在实用函数中包含业务逻辑。
  - ❌ **不应该**：创建具有副作用的实用函数。

  ```javascript
  // ✅ **应该**：创建专注且可复用的实用函数
  /**
   * 截断文本到指定长度
   * @param {string} text - 要截断的文本
   * @param {number} maxLength - 最大长度
   * @returns {string} 截断后的文本
   */
  function truncate(text, maxLength) {
    if (!text || text.length <= maxLength) {
      return text;
    }
    return text.slice(0, maxLength - 3) + '...';
  }
  ```

  ```javascript
  // ❌ **不应该**：在实用函数中添加副作用
  function truncate(text, maxLength) {
    if (!text || text.length <= maxLength) {
      return text;
    }
    
    // 副作用 - 修改全局状态或日志记录
    console.log(`将文本从 ${text.length} 截断到 ${maxLength} 个字符`);
    
    return text.slice(0, maxLength - 3) + '...';
  }
  ```

- **位置**：
    - **核心 CLI 实用工具**：将主要用于核心 `task-master` CLI 逻辑和命令模块 (`scripts/modules/*`) 的实用工具放入 [scripts/modules/utils.js](mdc:scripts/modules/utils.js)。
    - **MCP 服务器实用工具**：将专门设计用于支持 MCP 服务器实现的实用工具放入 `mcp-server/src/` 的适当子目录中。
        - 路径/核心逻辑辅助工具：[mcp-server/src/core/utils/](mdc:mcp-server/src/core/utils/)（例如 `path-utils.js`）。
        - 工具执行/响应辅助工具：[mcp-server/src/tools/utils.js](mdc:mcp-server/src/tools/utils.js)。

## 文档标准

- **JSDoc 格式**：
  - ✅ **应该**：为所有参数和返回值添加文档。
  - ✅ **应该**：为复杂逻辑添加描述。
  - ✅ **应该**：为非显而易见的用法添加示例。
  - ❌ **不应该**：跳过“简单”函数的文档。

  ```javascript
  // ✅ **应该**：提供完整的 JSDoc 文档
  /**
   * 读取并解析 JSON 文件
   * @param {string} filepath - JSON 文件路径
   * @returns {Object|null} 解析后的 JSON 数据，或在发生错误时返回 null
   */
  function readJSON(filepath) {
    try {
      const rawData = fs.readFileSync(filepath, 'utf8');
      return JSON.parse(rawData);
    } catch (error) {
      log('error', `读取 JSON 文件 ${filepath} 时出错：`, error.message);
      if (CONFIG.debug) {
        console.error(error);
      }
      return null;
    }
  }
  ```

## 配置管理（通过 `config-manager.js`）

Taskmaster 配置（不包括 API 密钥）主要通过位于项目根目录的 `.taskmasterconfig` 文件进行管理，并通过 [scripts/modules/config-manager.js](mdc:scripts/modules/config-manager.js) 中的 getter 访问。

- **`.taskmasterconfig` 文件**：
  - ✅ **应该**：使用此 JSON 文件存储设置，如 AI 模型选择（主模型、研究模型、备用模型）、参数（温度、最大令牌数）、日志级别、默认优先级/子任务等。
  - ✅ **应该**：使用 `task-master models --setup` CLI 命令或 `models` MCP 工具管理此文件。
  - ✅ **应该**：依赖 [config-manager.js](mdc:scripts/modules/config-manager.js) 加载此文件（使用从 MCP 或通过 CLI 工具找到的正确项目根目录），与默认值合并，并提供经过验证的设置。
  - ❌ **不应该**：在此文件中存储 API 密钥。
  - ❌ **不应该**：除非必要，否则不要手动编辑此文件。

- **配置 getter（`config-manager.js`）**：
  - ✅ **应该**：从 `config-manager.js` 导入并使用特定的 getter（例如 `getMainProvider()`、`getLogLevel()`、`getMainMaxTokens()`）来访问 *应用逻辑所需* 的配置值（如 `getDefaultSubtasks`）。
  - ✅ **应该**：如果从 MCP 直接函数调用 getter，则传递 `explicitRoot` 参数，以确保加载正确项目的配置。
  - ❌ **不应该**：从核心逻辑函数（`scripts/modules/task-manager/*`）调用 AI 特定的 getter（如 `getMainModelId`、`getMainMaxTokens`）。相反，应将 `role` 传递给统一的 AI 服务。
  - ❌ **不应该**：直接从环境变量访问配置值（除了 API 密钥）。

- **API 密钥处理（`utils.js` & `ai-services-unified.js`）**：
  - ✅ **应该**：仅在 `.env`（由 CLI 使用，通过 `scripts/dev.js` 中的 `dotenv` 加载）或 `.cursor/mcp.json`（由 MCP 使用，通过 `session.env` 访问）中存储 API 密钥。
  - ✅ **应该**：在可能需要尝试 AI 调用之前，使用 `isApiKeySet(providerName, session)` 从 `config-manager.js` 检查提供商的密钥是否可用，但请注意统一服务会执行自己的内部检查。
  - ✅ **应该**：了解统一服务层（`ai-services-unified.js`）内部使用 `resolveEnvVariable(key, session)` 从 `utils.js` 解析 API 密钥。

- **错误处理**：
  - ✅ **应该**：如果 `.taskmasterconfig` 文件缺失或无效，当通过 `getConfig` 访问时（例如在 `commands.js` 或直接函数中），处理潜在的 `ConfigurationError`。

## 日志实用工具（在 `scripts/modules/utils.js` 中）

- **日志级别**：
  - ✅ **应该**：支持多个日志级别（调试、信息、警告、错误）。
  - ✅ **应该**：为不同日志级别使用适当的图标。
  - ✅ **应该**：尊重配置的日志级别。
  - ❌ **不应该**：在日志实用工具之外直接使用 `console.log`。
  - **关于传递的日志记录器**：当将日志记录器对象（如 FastMCP 的 `log` 对象）作为 *参数*（例如作为 `mcpLog`）传递到核心 Task Master 函数时，接收函数通常期望该对象上可以直接调用特定方法（`.info`、`.warn`、`.error` 等）（例如 `mcpLog[level](...)`）。如果传递的日志记录器没有这种确切结构，则可能需要包装对象。有关标准模式，请参阅 [mcp.mdc](mdc:.cursor/rules/mcp.mdc) 中的 **处理日志上下文（`mcpLog`）** 部分。

- **日志记录器包装模式**： 
  - ✅ **应该**：使用日志记录器包装模式传递日志记录器，以防止出现 `mcpLog[level] is not a function` 错误：
  ```javascript
  // 标准 logWrapper 模式，用于包装 FastMCP 的 log 对象
  const logWrapper = {
    info: (message, ...args) => log.info(message, ...args),
    warn: (message, ...args) => log.warn(message, ...args),
    error: (message, ...args) => log.error(message, ...args),
    debug: (message, ...args) => log.debug && log.debug(message, ...args),
    success: (message, ...args) => log.info(message, ...args) // 将 success 映射到 info
  };
  
  // 将此包装器作为 mcpLog 传递，以确保一致的方法可用性
  // 这还确保了许多核心函数的输出格式设置为 'json'
  const options = { mcpLog: logWrapper, session };
  ```
  - ✅ **应该**：在任何调用核心函数（期望 `mcpLog`）的直接函数中实现此模式。
  - ✅ **应该**：将此解决方案与静默模式结合使用，以实现完整的输出控制。
  - ❌ **不应该**：直接将 FastMCP 的 `log` 对象作为 `mcpLog` 传递给核心函数。
  - **重要**：此模式已成功解决了 MCP 工具（例如 `update-task`、`update-subtask`）中的多个问题，其中错误使用或省略 `mcpLog` 导致运行时错误或 JSON 解析失败。
  - 有关完整实现细节，请参阅 [mcp.mdc](mdc:.cursor/rules/mcp.mdc) 中的 **处理日志上下文（`mcpLog`）** 部分。

  ```javascript
  // ✅ **应该**：实现适当的日志实用工具
  const LOG_LEVELS = {
    debug: 0,
    info: 1,
    warn: 2,
    error: 3
  };
  
  function log(level, ...args) {
    const icons = {
      debug: chalk.gray('🔍'),
      info: chalk.blue('ℹ️'),
      warn: chalk.yellow('⚠️'),
      error: chalk.red('❌'),
      success: chalk.green('✅')
    };
    
    if (LOG_LEVELS[level] >= LOG_LEVELS[CONFIG.logLevel]) {
      const icon = icons[level] || '';
      console.log(`${icon} ${args.join(' ')}`);
    }
  }
  ```

## 静默模式实用工具（在 `scripts/modules/utils.js` 中）

- **静默模式控制**：
  - ✅ **应该**：使用导出的静默模式函数，而不是直接访问全局变量。
  - ✅ **应该**：始终使用 `isSilentMode()` 检查当前静默模式状态。
  - ✅ **应该**：在 `finally` 块中禁用静默模式，以防止其保持启用状态。
  - ❌ **不应该**：直接访问全局 `silentMode` 变量。
  - ❌ **不应该**：启用静默模式后忘记禁用它。

  ```javascript
  // ✅ **应该**：正确使用静默模式控制函数
  
  // 示例：utils.js 中的正确实现
  
  // 全局静默模式标志（模块私有）
  let silentMode = false;
  
  // 启用静默模式
  function enableSilentMode() {
    silentMode = true;
  }
  
  // 禁用静默模式
  function disableSilentMode() {
    silentMode = false;
  }
  
  // 检查静默模式是否启用
  function isSilentMode() {
    return silentMode;
  }
  
  // 示例：另一个模块中的正确使用
  import { enableSilentMode, disableSilentMode, isSilentMode } from './utils.js';
  
  // 检查当前状态
  if (!isSilentMode()) {
    console.log('静默模式未启用');
  }
  
  // 使用 try/finally 模式确保禁用静默模式
  try {
    enableSilentMode();
    // 执行应抑制控制台输出的操作
    performOperation();
  } finally {
    disableSilentMode();
  }
  ```

- **与日志集成**：
  - ✅ **应该**：使 `log` 函数尊重静默模式
  ```javascript
  function log(level, ...args) {
    // 如果启用了静默模式，则跳过日志记录
    if (isSilentMode()) {
      return;
    }
    
    // 其余日志记录逻辑...
  }
  ```

- **静默模式的常见模式**：
  - ✅ **应该**：在调用 **核心函数**（`scripts/modules/*`）的 **直接函数**（`mcp-server/src/core/direct-functions/*`）中，确保抑制核心函数的控制台输出，以避免破坏 MCP JSON 响应。
    - **首选方法**：更新核心函数以接受 `outputFormat` 参数（例如 `outputFormat = 'text'`），并在显示任何 UI 元素（横幅、旋转器、框、直接 `console.log`）之前检查 `outputFormat === 'text'`。从直接函数传递 `'json'`。
    - **必要的回退/保证**：如果核心函数 *不能* 被修改，或者其通过 `outputFormat` 抑制输出不可靠，则在直接函数中使用 `enableSilentMode()` 和 `disableSilentMode()` 包装核心函数调用，放在 `try/finally` 块中。这相当于一个安全网。
  ```javascript
  // 示例：直接函数中的实现
  export async function someOperationDirect(args, log) {
    let result;
    const tasksPath = findTasksJsonPath(args, log); // 首先获取路径
    
    // 选项 1：核心函数处理 'json' 格式（首选）
    try {
      result = await coreFunction(tasksPath, ...otherArgs, 'json'); // 传递 'json'
      return { success: true, data: result, fromCache: false };
    } catch (error) {
      // 处理错误...
    }

    // 选项 2：核心函数输出不可靠（回退/保证）
    try {
      enableSilentMode(); // 在调用前启用
      result = await coreFunction(tasksPath, ...otherArgs); // 调用时不传递格式参数
    } catch (error) {
      // 处理错误...
      log.error(`失败：${error.message}`);
      return { success: false, error: { /* ... */ } };
    } finally {
      disableSilentMode(); // 始终在 finally 中禁用
    }
    return { success: true, data: result, fromCache: false }; // 假设如果没有捕获错误则成功
  }
  ```
  - ✅ **应该**：对于接受静默模式参数但还需要检查全局状态的函数（较少见）：
  ```javascript
  // 检查传递的参数和全局静默模式
  const isSilent = options.silentMode || (typeof options.silentMode === 'undefined' && isSilentMode());
  ```

## 文件操作（在 `scripts/modules/utils.js` 中）

- **错误处理**：
  - ✅ **应该**：为所有文件操作使用 try/catch 块。
  - ✅ **应该**：在失败时返回 null 或默认值。
  - ✅ **应该**：使用 `log` 实用工具记录详细的错误信息。
  - ❌ **不应该**：允许异常从简单的文件读写中未处理地传播。

  ```javascript
  // ✅ **应该**：正确处理核心实用工具中的文件操作错误
  function writeJSON(filepath, data) {
    try {
      // 确保目录存在（示例）
      const dir = path.dirname(filepath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }
      fs.writeFileSync(filepath, JSON.stringify(data, null, 2));
    } catch (error) {
      log('error', `写入 JSON 文件 ${filepath} 时出错：`, error.message);
      if (CONFIG.debug) {
        console.error(error);
      }
    }
  }
  ```

## 任务特定实用工具（在 `scripts/modules/utils.js` 中）

- **任务 ID 格式化**：
  - ✅ **应该**：创建用于一致 ID 处理的实用工具。
  - ✅ **应该**：支持不同的 ID 格式（数字、字符串、点符号）。
  - ❌ **不应该**：在模块之间重复格式化逻辑。

  ```javascript
  // ✅ **应该**：创建用于常见操作的实用工具
  /**
   * 将任务 ID 格式化为字符串
   * @param {string|number} id - 要格式化的任务 ID
   * @returns {string} 格式化的任务 ID
   */
  function formatTaskId(id) {
    if (typeof id === 'string' && id.includes('.')) {
      return id; // 已经是带有点的字符串格式（例如 "1.2"）
    }
    
    if (typeof id === 'number') {
      return id.toString();
    }
    
    return id;
  }
  ```

- **任务搜索**：
  - ✅ **应该**：实现可复用的任务查找实用工具。
  - ✅ **应该**：支持任务和子任务查找。
  - ✅ **应该**：为子任务结果添加上下文。

  ```javascript
  // ✅ **应该**：创建全面的搜索实用工具
  /**
   * 在任务数组中通过 ID 查找任务
   * @param {Array} tasks - 任务数组
   * @param {string|number} taskId - 要查找的任务 ID
   * @returns {Object|null} 任务对象，如果未找到则返回 null
   */
  function findTaskById(tasks, taskId) {
    if (!taskId || !tasks || !Array.isArray(tasks)) {
      return null;
    }
    
    // 检查是否是子任务 ID（例如 "1.2"）
    if (typeof taskId === 'string' && taskId.includes('.')) {
      const [parentId, subtaskId] = taskId.split('.').map(id => parseInt(id, 10));
      const parentTask = tasks.find(t => t.id === parentId);
      
      if (!parentTask || !parentTask.subtasks) {
        return null;
      }
      
      const subtask = parentTask.subtasks.find(st => st.id === subtaskId);
      if (subtask) {
        // 为子任务添加父任务引用以提供上下文
        subtask.parentTask = { 
          id: parentTask.id, 
          title: parentTask.title,
          status: parentTask.status
        };
        subtask.isSubtask = true;
      }
      
      return subtask || null;
    }
    
    const id = parseInt(taskId, 10);
    return tasks.find(t => t.id === id) || null;
  }
  ```

## 循环检测（在 `scripts/modules/utils.js` 中）

- **图算法**：
  - ✅ **应该**：使用图遍历实现循环检测。
  - ✅ **应该**：跟踪已访问节点和递归堆栈。
  - ✅ **应该**：返回有关循环的具体信息。

  ```javascript
  // ✅ **应该**：正确实现循环检测
  /**
   * 使用 DFS 在依赖图中查找循环
   * @param {string} subtaskId - 当前子任务 ID
   * @param {Map} dependencyMap - 子任务 ID 到其依赖项的映射
   * @param {Set} visited - 已访问节点的集合
   * @param {Set} recursionStack - 当前递归堆栈中的节点集合
   * @param {Array} path - 当前路径
   * @returns {Array} - 需要移除以打破循环的依赖边列表
   */
  function findCycles(subtaskId, dependencyMap, visited = new Set(), recursionStack = new Set(), path = []) {
    // 将当前节点标记为已访问并加入递归堆栈
    visited.add(subtaskId);
    recursionStack.add(subtaskId);
    path.push(subtaskId);
    
    const cyclesToBreak = [];
    
    // 获取当前子任务的所有依赖项
    const dependencies = dependencyMap.get(subtaskId) || [];
    
    // 遍历每个依赖项
    for (const depId of dependencies) {
      // 如果未访问，则递归检查循环
      if (!visited.has(depId)) {
        const cycles = findCycles(depId, dependencyMap, visited, recursionStack, [...path]);
        cyclesToBreak.push(...cycles);
      } 
      // 如果依赖项在递归堆栈中，则找到循环
      else if (recursionStack.has(depId)) {
        // 循环中的最后一个边是我们想要移除的
        cyclesToBreak.push(depId);
      }
    }
    
    // 在返回前从递归堆栈中移除节点
    recursionStack.delete(subtaskId);
    
    return cyclesToBreak;
  }
  ```

## MCP 服务器核心实用工具（`mcp-server/src/core/utils/`）

### 项目根目录和任务文件路径检测（`path-utils.js`）

- **目的**：此模块 ([mcp-server/src/core/utils/path-utils.js](mdc:mcp-server/src/core/utils/path-utils.js)) 提供了定位用户 `tasks.json` 文件的机制，供直接函数使用。
- **`findTasksJsonPath(args, log)`**：
    - ✅ **应该**：从 **直接函数包装器**（例如 `mcp-server/src/core/direct-functions/` 中的 `listTasksDirect`）中调用此函数，以获取相关 `tasks.json` 的绝对路径。
    - 传递 MCP 工具接收到的整个 `args` 对象（应包含从会话派生的 `projectRoot`）和 `log` 对象。
    - 实现了用于查找 `tasks.json` 路径的 **简化优先级系统**：
        1. 明确传递给 `args` 的 `projectRoot`（MCP 工具预期）。
        2. 缓存的 `lastFoundProjectRoot`（CLI 回退）。
        3. 从 `process.cwd()` 向上搜索（CLI 回退）。
    - 如果无法定位 `tasks.json` 文件，则抛出特定错误。
    - 在成功时更新 `lastFoundProjectRoot` 缓存。
- **`PROJECT_MARKERS`**：导出的数组，包含在 CLI 回退搜索期间用于识别可能项目根目录的常见文件/目录名称。
- **`getPackagePath()`**：用于查找 `task-master-ai` 包本身安装路径的实用工具（可能可移除）。

## MCP 服务器工具实用工具（`mcp-server/src/tools/utils.js`）

这些实用工具专门支持 MCP 工具的实现和执行。

- **`normalizeProjectRoot(rawPath, log)`**：
    - **目的**：接受原始项目根路径（可能 URI 编码，带有 `file://` 前缀，Windows 斜杠）并返回适合服务器操作系统的规范化绝对路径。
    - **逻辑**：解码 URI，移除 `file://`，处理 Windows 驱动器前缀（`/C:/`），将 `\` 替换为 `/`，使用 `path.resolve()`。
    - **使用**：由 `withNormalizedProjectRoot` 高阶函数（HOF）内部使用。

- **`getRawProjectRootFromSession(session, log)`**：
    - **目的**：从会话对象（`session.roots[0].uri` 或 `session.roots.roots[0].uri`）中提取 *原始* 项目根 URI 字符串，而不进行规范化。
    - **使用**：由 `withNormalizedProjectRoot` HOF 内部使用，作为 `args.projectRoot` 未提供时的回退。

- **`withNormalizedProjectRoot(executeFn)`**：
    - **目的**：设计用于包装工具的 `execute` 方法的高阶函数（HOF）。
    - **逻辑**： 
        1. 确定原始项目根（来自 `args.projectRoot` 或 `getRawProjectRootFromSession`）。
        2. 使用 `normalizeProjectRoot` 规范化原始路径。
        3. 将规范化后的绝对路径重新注入到 `args` 对象中作为 `args.projectRoot`。
        4. 使用更新后的 `args` 调用原始 `executeFn`。
    - **使用**：应包装每个需要可靠、规范化项目根路径的 MCP 工具的 `execute` 函数。
    - **示例**：
      ```javascript
      // 在 mcp-server/src/tools/your-tool.js 中
      import { withNormalizedProjectRoot } from './utils.js';
      
      export function registerYourTool(server) {
          server.addTool({
              // ... name, description, parameters ...
              execute: withNormalizedProjectRoot(async (args, context) => {
                  // args.projectRoot 在此处已规范化
                  const { projectRoot /*, other args */ } = args;
                  // ... 使用规范化 projectRoot 的工具逻辑 ...
              })
          });
      }
      ```

- **`handleApiResult(result, log, errorPrefix, processFunction)`**：
    - **目的**：将直接函数返回的响应（`{ success, data/error, fromCache }`）格式化为 MCP 响应格式。
    - **使用**：在工具的 `execute` 方法末尾调用，传递直接函数调用的结果。

- **`createContentResponse(content)`** / **`createErrorResponse(errorMessage)`**：
    - **目的**：创建用于成功或错误消息的基本 MCP 响应结构的辅助函数。
    - **使用**：由 `handleApiResult` 内部使用，也可直接用于简单响应。

- **`createLogWrapper(log)`**：
    - **目的**：创建一个具有标准方法（`info`、`warn`、`error`、`debug`、`success`）的日志记录器对象包装器，映射到传递的 MCP `log` 对象的方法。确保在传递日志记录器到核心函数时的兼容性。
    - **使用**：在直接函数中传递 `log` 对象之前使用。

- **`getCachedOrExecute({ cacheKey, actionFn, log })`**：
    - **目的**：用于在直接函数中实现缓存的实用工具。检查缓存中的 `cacheKey`；如果未命中，则执行 `actionFn`，缓存成功结果并返回。
    - **使用**：在直接函数调用中包装核心逻辑执行。

- **`processMCPResponseData(taskOrData, fieldsToRemove)`**：
    - **目的**：在通过 MCP 发送响应之前，从任务对象中过滤可能敏感或较大的字段（如 `details`、`testStrategy`）的实用工具。
    - **使用**：作为默认 `processFunction` 传递给 `handleApiResult`。

- **`getProjectRootFromSession(session, log)`**：
    - **目的**：提取 *并规范化* 会话中的项目根目录的遗留函数。被 HOF 模式取代，但可能仍被直接使用。
    - **建议**：在工具中优先使用 `withNormalizedProjectRoot` HOF，而不是直接调用此函数。

- **`executeTaskMasterCommand(...)`**： 
    - **目的**：作为回退执行 `task-master` CLI 命令。
    - **建议**：大多数用途已废弃，优先使用直接函数调用。

## 导出组织

- **按相关性分组函数**：
  - ✅ **应该**：将与位置相关的实用工具保持在一起（例如，核心 CLI 实用工具在 `scripts/modules/utils.js` 中，MCP 路径实用工具在 `mcp-server/src/core/utils/path-utils.js` 中，MCP 工具实用工具在 `mcp-server/src/tools/utils.js` 中）。
  - ✅ **应该**：每个文件中使用单条语句导出所有实用工具函数。
  - ✅ **应该**：将相关导出分组。
  - ✅ **应该**：导出配置常量（来自 `scripts/modules/utils.js`）。
  - ❌ **不应该**：使用默认导出。
  - ❌ **不应该**：创建循环依赖（参见 [architecture.mdc](mdc:.cursor/rules/architecture.mdc)）。

```javascript
// 示例：来自 scripts/modules/utils.js 的导出
export {
  // 配置
  CONFIG,
  LOG_LEVELS,
  
  // 日志
  log,
  
  // 文件操作
  readJSON,
  writeJSON,
  
  // 字符串操作
  sanitizePrompt,
  truncate,
  
  // 任务实用工具
  // ... (taskExists, formatTaskId, findTaskById, 等等)
  
  // 图算法
  findCycles,
};

// 示例：来自 mcp-server/src/core/utils/path-utils.js 的导出
export {
  findTasksJsonPath,
  getPackagePath,
  PROJECT_MARKERS,
  lastFoundProjectRoot // 如果需要直接使用/重置，导出以供使用
};

// 示例：来自 mcp-server/src/tools/utils.js 的导出
export {
  getProjectRoot,
  getProjectRootFromSession,
  handleApiResult,
  executeTaskMasterCommand,
  processMCPResponseData,
  createContentResponse,
  createErrorResponse,
  getCachedOrExecute
};
```

有关 MCP 服务器架构和集成的更多上下文，请参阅 [mcp.mdc](mdc:.cursor/rules/mcp.mdc) 和 [architecture.mdc](mdc:.cursor/rules/architecture.mdc)。