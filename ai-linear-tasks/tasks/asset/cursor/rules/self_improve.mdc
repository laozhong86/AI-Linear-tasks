---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---
- **规则改进触发因素**：
    - 现有规则未涵盖的新代码模式。
    - 多个文件中重复出现的相似实现。
    - 本可以避免的常见错误模式。
    - 持续使用的新库或新工具。
    - 代码库中涌现的最佳实践。
- **分析过程**：
    - 将新代码与现有规则进行比较。
    - 识别应当标准化的模式。
    - 查找对外部文档的引用。
    - 检查是否存在一致的错误处理模式。
    - 监控测试模式和测试覆盖率。
- **规则更新**：
    - **在以下情况添加新规则**：
        - 一种新技术或新模式在3个及以上文件中被使用。
        - 一条规则可以预防常见的错误。
        - 代码审查中反复提到相同的反馈。
        - 出现新的安全或性能模式。
    - **在以下情况修改现有规则**：
        - 代码库中有更好的示例。
        - 发现了更多的边界情况。
        - 相关规则已更新。
        - 实现细节发生了变化。
- **示例模式识别**：
```typescript
// 如果你看到类似这样重复出现的模式：
const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
});

// 可以考虑在[prisma.mdc](mdc:.cursor/rules/prisma.mdc)中添加：
// - 标准的选择字段
// - 常见的where条件
// - 性能优化模式
```
- **规则质量检查**：
    - 规则应当具有可操作性且明确具体。
    - 示例应来源于实际代码。
    - 引用应当是最新的。
    - 模式应当被持续执行。
- **持续改进**：
    - 监控代码审查评论。
    - 追踪常见的开发问题。
    - 在重大重构后更新规则。
    - 添加相关文档的链接。
    - 相互参照相关规则。
- **规则弃用**：
    - 将过时的模式标记为已弃用。
    - 删除不再适用的规则。
    - 更新对已弃用规则的引用。
    - 记录旧模式的迁移路径。
- **文档更新**：
    - 保持示例与代码同步。
    - 更新对外部文档的引用。
    - 维护相关规则之间的链接。
    - 记录重大变更。

遵循[`cursor_rules.mdc`](mdc:.cursor/rules/cursor_rules.mdc)以确保规则格式和结构正确。 